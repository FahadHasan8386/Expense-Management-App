@page "/app/deposit-form/{DepositId:long}"

<PageTitle>Deposit Create</PageTitle>

<div class="container mt-4">
	<div class="card shadow-lg border-0">
		<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
			<h4 class="mb-0">
				@if (DepositId == 0)
				{
					<span><i class="bi bi-plus-circle"></i> Create Deposit</span>
				}
				else
				{
					<span><i class="bi bi-pencil-square"></i> Edit Deposit</span>
				}
			</h4>
			<a href="/app/deposits" class="btn btn-light btn-sm">
				<i class="bi bi-arrow-left"></i> Back to List
			</a>   
		</div> 

		<div class="card-body">
			<div> 
				<div class="row mb-3"> 
					@if (DepositId > 0)
					{
						<div class="col-md-4">
							<label class="form-label fw-semibold">Deposit ID</label>
							<InputNumber @bind-Value="DepositDto.DepositId" class="form-control" readonly />
						</div>
					}

					<div class="col-md-4">
						<label class="form-label fw-semibold">Deposit Date</label>
						<InputDate @bind-Value="DepositDto.DepositDate" class="form-control" />
					</div>

					<div class="col-md-4">
						<label class="form-label fw-semibold">Deposit Amount</label>
						<InputNumber @bind-Value="DepositDto.DepositAmount" class="form-control" placeholder="Enter deposit amount" />
					</div>

					<div class="col-md-12">
						<label class="form-label fw-semibold">Remarks</label>
						<InputTextArea @bind-Value="DepositDto.Remarks" class="form-control" rows="3" placeholder="Write remarks..." />
					</div>
				</div>

				<button class="btn btn-success" @onclick="OnSaveClickAsync">
					@((DepositId == 0) ? "Save" : "Update")
				</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public long DepositId { get; set; }

	private DepositDto DepositDto { get; set; } = new();
	private DepositViewModel DepositViewModel { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		if (DepositId > 0)
		{
			DepositViewModel = await DepositApiService.GetDepositByIdAsync(DepositId);
			SetDepositData();
		}
	}

	private void SetDepositData()
	{
		DepositDto.DepositId = DepositViewModel.DepositId;
		DepositDto.DepositDate = DepositViewModel.DepositDate;
		DepositDto.DepositAmount = DepositViewModel.DepositAmount;
		DepositDto.Remarks = DepositViewModel.Remarks;
	}

	private async Task OnSaveClickAsync()
	{
		if (DepositId == 0)
		{
			await DepositApiService.AddDepositAsync(DepositDto);
		}
		else
		{ 
			await DepositApiService.UpdateDepositAsync(DepositDto);
		}

		NavigationManager.NavigateTo("/app/deposits");
	}
}

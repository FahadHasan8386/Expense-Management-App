@page "/app/deposits"

<PageTitle>Deposits</PageTitle>

<div class="container mt-4">
	<div class="card shadow-lg border-0">
		<div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
			<h4 class="mb-0">
				<i class="bi bi-list-ul me-2"></i> Deposit List
			</h4>
			<button class="btn btn-light btn-sm" @onclick="OnClickCreateDeposit">
				<i class="bi bi-plus-circle me-1"></i> Add Deposit
			</button>
		</div>

		<div class="card-body">
			<div class="table-responsive">
				<table class="table table-hover align-middle">
					<thead class="table-light">
						<tr>
							<th>#</th>
							<th>Deposit ID</th>
							<th>Amount</th>
							<th>Date</th>
							<th>Remarks</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in DepositViewModels)
						{
							<tr>
								<td>@SL</td>
								<td>@item.DepositId</td>
								<td>@item.DepositAmount</td>
								<td>@item.DepositDate.ToString("dd MMM, yyyy")</td>
								<td>@item.Remarks</td>
								<td>
									<button class="btn btn-sm btn-outline-info me-2">
										<i class="bi bi-eye"></i>
									</button>
									<button class="btn btn-sm btn-outline-primary me-2" @onclick="() => OnClickUpdateDeposit(item.DepositId)">
										<i class="bi bi-pencil"></i>
									</button>
									<button class="btn btn-sm btn-outline-danger" @onclick="() => OnClickDeleteDeposit(item.DepositId)">
										<i class="bi bi-trash"></i>
									</button>
								</td>
							</tr>
							SL++;
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>

@code {
	private long SL { get; set; } = 1;
	private List<DepositViewModel> DepositViewModels { get; set; } = [];

	protected async override Task OnInitializedAsync()
	{
		DepositViewModels = await DepositApiService.GetDepositAsync();
	}

	protected void OnClickCreateDeposit()
	{
		NavigationManager.NavigateTo($"/app/deposit-form/{0}");
	}

	protected void OnClickUpdateDeposit(long depositId)
	{
		NavigationManager.NavigateTo($"/app/deposit-form/{depositId}");
	}

	protected async Task OnClickDeleteDeposit(long depositId)
	{

		await DepositApiService.DeleteDepositsAsync(depositId);
		
	}


}